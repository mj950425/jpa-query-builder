package persistence.sql.ddl.builder;

import entity.Person;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;
import persistence.DatabaseTest;
import persistence.entitiy.attribute.EntityAttribute;
import persistence.mapper.PersonRowMapper;
import persistence.sql.ddl.converter.SqlConverter;
import persistence.sql.infra.H2SqlConverter;
import persistence.sql.parser.AttributeParser;

import static org.assertj.core.api.AssertionsForClassTypes.assertThat;
import static persistence.sql.common.DDLType.CREATE;
import static persistence.study.TestUtils.assertDoesNotThrowException;

@Nested
@DisplayName("CreateDDLQueryBuilder 클래스의")
public class CreateDDLQueryBuilderTest extends DatabaseTest {
    private final SqlConverter sqlConverter = new H2SqlConverter();
    private final AttributeParser parser = new AttributeParser();

    @Nested
    @DisplayName("prepareStatement 메소드는")
    class prepareStatement {
        @Nested
        @DisplayName("유효한 엔티티 정보가 주어지면")
        class withValidEntity {
            @Test
            @DisplayName("CREATE DDL을 리턴한다.")
            void returnDDL() {
                EntityAttribute entityAttribute = EntityAttribute.of(Person.class, parser);

                String ddl = DDLQueryBuilderFactory.createQueryBuilder(CREATE)
                        .prepareStatement(entityAttribute, new H2SqlConverter());

                assertDoesNotThrowException(() -> {
                    jdbcTemplate.execute(ddl);
                    insertPerson(new Person(1L, "민준", 29, "minjoon1995@naver.com"));
                });

                Person person = findPersonById(1L);

                Assertions.assertAll(
                        () -> assertThat(person.getEmail()).isEqualTo("minjoon1995@naver.com"),
                        () -> assertThat(person.getAge()).isEqualTo(29),
                        () -> assertThat(person.getName()).isEqualTo("민준"),
                        () -> assertThat(person.getId()).isEqualTo(1),
                        () -> assertThat(ddl).isEqualTo("CREATE TABLE users ( id BIGINT GENERATED BY DEFAULT AS IDENTITY," +
                                " nick_name VARCHAR(255), old INTEGER NOT NULL, email VARCHAR(255) NOT NULL );")
                );
            }

            private Person findPersonById(Long id) {
                return jdbcTemplate.queryForObject(
                        String.format("SELECT * FROM users WHERE id = %s", id),
                        new PersonRowMapper()
                );
            }

            private void insertPerson(Person person) {
                String sql = String.format("insert into users (id, nick_name, old, email) VALUES (%s, '%s', %s, '%s')",
                        person.getId(),
                        person.getName(),
                        person.getAge(),
                        person.getEmail()
                );
                jdbcTemplate.execute(sql);
            }
        }
    }
}
