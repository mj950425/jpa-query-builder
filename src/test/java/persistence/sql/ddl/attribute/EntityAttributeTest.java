package persistence.sql.ddl.attribute;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;
import persistence.fixture.TestEntityFixture;
import persistence.sql.ddl.converter.SqlConverter;
import persistence.sql.ddl.parser.AttributeParser;
import persistence.sql.infra.H2SqlConverter;

import static org.assertj.core.api.AssertionsForClassTypes.assertThat;

@Nested
@DisplayName("EntityAttribute 클래스의")
public class EntityAttributeTest {
    SqlConverter sqlConverter = new H2SqlConverter();
    AttributeParser attributeParser = new AttributeParser(sqlConverter);

    @Nested
    @DisplayName("of 메소드는")
    class of {
        @Nested
        @DisplayName("유효한 클래스 정보와 파서가 들어오면")
        class withValidArgs {
            @Test
            @DisplayName("EntityAttribute를 반환한다.")
            void returnEntityAttribute() {
                EntityAttribute entityAttribute = EntityAttribute.of(TestEntityFixture.EntityWithValidAnnotation.class, attributeParser);

                Assertions.assertAll(
                        () -> assertThat(entityAttribute.getTableName())
                                .isEqualTo("entity_name"),
                        () -> assertThat(entityAttribute.prepareDDL())
                                .isEqualTo("id BIGINT GENERATED BY DEFAULT AS IDENTITY, name VARCHAR(200), old INTEGER NOT NULL")
                );
            }
        }

        @Nested
        @DisplayName("@Id 가 여러개인 클래스 정보와 파서가 들어오면")
        class withMultiIdClass {
            @Test
            @DisplayName("예외를 반환한다.")
            void throwException() {
                Assertions.assertThrows(
                        IllegalStateException.class, () -> EntityAttribute.of(
                                TestEntityFixture.EntityWithMultiIdAnnotation.class, attributeParser));
            }
        }

        @Nested
        @DisplayName("@Entity 가 없는 클래스 정보와 파서가 들어오면")
        class withEntityWithOutEntityAnnotation {
            @Test
            @DisplayName("예외를 반환한다.")
            void throwException() {
                Assertions.assertThrows(
                        IllegalStateException.class, () -> EntityAttribute.of(
                                TestEntityFixture.EntityWithOutEntityAnnotation.class, attributeParser));
            }
        }
    }
}
